/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;
  $opal.add_stubs(['$raise', '$class', '$__init__', '$instance_eval', '$new', '$extend']);
  return (function($base) {
    var self = $module($base, 'Singleton');

    var def = self._proto, $scope = self._scope, $a;
    def.$clone = function() {
      var $a, self = this;
      return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't clone instance of singleton " + (self.$class()));
    };

    def.$dup = function() {
      var $a, self = this;
      return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't dup instance of singleton " + (self.$class()));
    };

    (function($base) {
      var self = $module($base, 'SingletonClassMethods');

      var def = self._proto, $scope = self._scope, TMP_1, TMP_2;
      def.$clone = TMP_1 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;
        TMP_1._p = null;
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__($opal.find_super_dispatcher(self, 'clone', TMP_1, $iter).apply(self, $zuper));
      };

      def.$inherited = TMP_2 = function(sub_klass) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_2._p, $yield = $iter || nil;
        TMP_2._p = null;
        $opal.find_super_dispatcher(self, 'inherited', TMP_2, $iter).apply(self, $zuper);
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__(sub_klass);
      };
            ;$opal.donate(self, ["$clone", "$inherited"]);
    })(self);

    (function(self) {
      var $scope = self._scope, def = self._proto;
      self._proto.$__init__ = function(klass) {
        var $a, $b, TMP_3, self = this;
        ($a = ($b = klass).$instance_eval, $a._p = (TMP_3 = function(){var self = TMP_3._s || this;
        return self.singleton__instance__ = nil}, TMP_3._s = self, TMP_3), $a).call($b);
        $opal.defs(klass, '$instance', function() {
          var $a, self = this;
          if (self.singleton__instance__ == null) self.singleton__instance__ = nil;

          if (($a = self.singleton__instance__) !== false && $a !== nil) {
            return self.singleton__instance__};
          return self.singleton__instance__ = self.$new();
        });
        return klass;
      };
      return (self._proto.$included = TMP_4 = function(klass) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_4._p, $yield = $iter || nil;
        TMP_4._p = null;
        $opal.find_super_dispatcher(self, 'included', TMP_4, $iter).apply(self, $zuper);
        klass.$extend((($a = $scope.SingletonClassMethods) == null ? $opal.cm('SingletonClassMethods') : $a));
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__(klass);
      }, nil);
    })((($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$singleton_class());
        ;$opal.donate(self, ["$clone", "$dup"]);
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/singleton.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;
  $opal.add_stubs(['$include', '$find', '$scraper_for_url', '$recipes', '$<<', '$instance']);
  ;
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $RecipeRegistry(){};
      var self = $RecipeRegistry = $klass($base, $super, 'RecipeRegistry', $RecipeRegistry);

      var def = $RecipeRegistry._proto, $scope = $RecipeRegistry._scope, $a;
      def.recipes = nil;
      self.$include((($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a));

      def.$initialize = function() {
        var self = this;
        return self.recipes = [];
      };

      def.$recipes = function() {
        var self = this;
        return self.recipes;
      };

      def.$reset = function() {
        var self = this;
        return self.recipes = [];
      };

      def.$scraper_for_url = function(url) {
        var $a, $b, TMP_1, self = this, scraper = nil;
        scraper = nil;
        ($a = ($b = self.$recipes()).$find, $a._p = (TMP_1 = function(recipe){var self = TMP_1._s || this;if (recipe == null) recipe = nil;
        return scraper = recipe.$scraper_for_url(url)}, TMP_1._s = self, TMP_1), $a).call($b);
        return scraper;
      };

      return ($opal.defs(self, '$register', function(scraper_class) {
        var self = this;
        return self.$instance().$recipes()['$<<'](scraper_class);
      }), nil);
    })(self, null)
    
  })(self);
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/recipe_registry.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;
  $opal.add_stubs(['$attr_reader', '$get', '$==', '$scraper_type', '$new', '$scraper_for_url', '$recipe', '$scrape', '$raise', '$instance_eval', '$to_proc', '$type']);
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $ScraperScope(){};
      var self = $ScraperScope = $klass($base, $super, 'ScraperScope', $ScraperScope);

      var def = $ScraperScope._proto, $scope = $ScraperScope._scope;
      self.$attr_reader("recipe", "scraper_type", "doc", "url");

      def.$initialize = function(recipe, type, doc, url) {
        var self = this;
        self.recipe = recipe;
        self.scraper_type = type;
        self.doc = doc;
        return self.url = url;
      };

      return (def.$get = function(url) {
        var $a, $b, self = this, html = nil, doc = nil, scraper = nil;
        html = (($a = ((($b = $scope.IGHTMLQuery) == null ? $opal.cm('IGHTMLQuery') : $b))._scope).HTTP == null ? $a.cm('HTTP') : $a.HTTP).$get(url);
        if (html !== false && html !== nil) {
          doc = (function() {if (($a = (self.$scraper_type()['$==']("text"))) !== false && $a !== nil) {
            return html
            } else {
            return (($a = $scope.HTMLDoc) == null ? $opal.cm('HTMLDoc') : $a).$new(html)
          }; return nil; })();
          if (doc !== false && doc !== nil) {
            scraper = self.$recipe().$scraper_for_url(url);
            if (scraper !== false && scraper !== nil) {
              return scraper.$scrape(doc, url)
              } else {
              return $hash2(["error"], {"error": "scraper not found for url: " + (url) + ", recipe: " + (self.$recipe())})
            };
            } else {
            return $hash2(["error"], {"error": "failed processing html"})
          };
          } else {
          return $hash2(["error"], {"error": "failed fetching html from url: " + (url)})
        };
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Scraper(){};
      var self = $Scraper = $klass($base, $super, 'Scraper', $Scraper);

      var def = $Scraper._proto, $scope = $Scraper._scope, TMP_1;
      def.scraper_block = nil;
      self.$attr_reader("url", "recipe", "type");

      def.$initialize = TMP_1 = function(recipe, url, type) {
        var $a, self = this, $iter = TMP_1._p, block = $iter || nil;
        if (type == null) {
          type = "html"
        }
        TMP_1._p = null;
        self.recipe = recipe;
        self.url = url;
        self.type = type;
        if (block === nil) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Scraper requires a block"))};
        return self.scraper_block = block;
      };

      return (def.$scrape = function(doc, url) {
        var $a, $b, $c, self = this;
        return ($a = ($b = (($c = $scope.ScraperScope) == null ? $opal.cm('ScraperScope') : $c).$new(self.$recipe(), self.$type(), doc, url)).$instance_eval, $a._p = self.scraper_block.$to_proc(), $a).call($b);
      }, nil);
    })(self, null);
    
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/scraper.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;
  $opal.add_stubs(['$[]=', '$metadata', '$<<', '$scrapers', '$new', '$to_proc', '$register', '$detect', '$is_a?', '$url', '$=~', '$==', '$extend']);
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $Recipe(){};
      var self = $Recipe = $klass($base, $super, 'Recipe', $Recipe);

      var def = $Recipe._proto, $scope = $Recipe._scope, $a;
      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self._proto, $scope = self._scope, TMP_1, TMP_2;
        def.$metadata = function() {
          var $a, self = this;
          if (self.metadata == null) self.metadata = nil;

          return ((($a = self.metadata) !== false && $a !== nil) ? $a : self.metadata = $hash2([], {}));
        };

        def.$scrapers = function() {
          var $a, self = this;
          if (self.scrapers == null) self.scrapers = nil;

          return ((($a = self.scrapers) !== false && $a !== nil) ? $a : self.scrapers = []);
        };

        def.$title = function(title) {
          var self = this;
          return self.$metadata()['$[]=']("title", title);
        };

        def.$on = TMP_1 = function(url) {
          var $a, $b, $c, self = this, $iter = TMP_1._p, block = $iter || nil;
          TMP_1._p = null;
          return self.$scrapers()['$<<'](($a = ($b = (($c = $scope.Scraper) == null ? $opal.cm('Scraper') : $c)).$new, $a._p = block.$to_proc(), $a).call($b, self, url));
        };

        def.$on_text = TMP_2 = function(url) {
          var $a, $b, $c, self = this, $iter = TMP_2._p, block = $iter || nil;
          TMP_2._p = null;
          return self.$scrapers()['$<<'](($a = ($b = (($c = $scope.Scraper) == null ? $opal.cm('Scraper') : $c)).$new, $a._p = block.$to_proc(), $a).call($b, self, url, "text"));
        };

        def.$inherited = function(subclass) {
          var $a, self = this;
          return (($a = $scope.RecipeRegistry) == null ? $opal.cm('RecipeRegistry') : $a).$register(subclass);
        };

        def.$scraper_for_url = function(url) {
          var $a, $b, TMP_3, self = this;
          return ($a = ($b = self.$scrapers()).$detect, $a._p = (TMP_3 = function(scraper){var self = TMP_3._s || this, $a, $b;if (scraper == null) scraper = nil;
          if (($a = scraper.$url()['$is_a?']((($b = $scope.Regexp) == null ? $opal.cm('Regexp') : $b))) !== false && $a !== nil) {
              return (url['$=~'](scraper.$url()))
              } else {
              return (url['$=='](scraper.$url()))
            }}, TMP_3._s = self, TMP_3), $a).call($b);
        };
                ;$opal.donate(self, ["$metadata", "$scrapers", "$title", "$on", "$on_text", "$inherited", "$scraper_for_url"]);
      })(self);

      return self.$extend((($a = $scope.ClassMethods) == null ? $opal.cm('ClassMethods') : $a));
    })(self, null)
    
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/recipe.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;
  $opal.add_stubs([]);
  ;
  ;
  return true;
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit.js.map
;
