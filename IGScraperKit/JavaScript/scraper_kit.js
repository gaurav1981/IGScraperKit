/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $hash2 = $opal.hash2, $klass = $opal.klass;
  $opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$strftime']);
  (function($base) {
    var self = $module($base, 'JSON');

    var def = self._proto, $scope = self._scope, $a;
    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value._isArray) {
            var arr = (options.array_class).$new();

            for (var i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            var hash = (options.object_class).$new();

            for (var k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            var klass;
            if ((klass = (hash)['$[]']((($a = $scope.JSON) == null ? $opal.cm('JSON') : $a).$create_id())) != nil) {
              klass = Opal.cget(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
      }
    };
  

    (function(self) {
      var $scope = self._scope, def = self._proto;
      return self.$attr_accessor("create_id")
    })(self.$singleton_class());

    self['$create_id=']("json_class");

    $opal.defs(self, '$[]', function(value, options) {
      var $a, $b, self = this;
      if (options == null) {
        options = $hash2([], {})
      }
      if (($a = (($b = $scope.String) == null ? $opal.cm('String') : $b)['$==='](value)) !== false && $a !== nil) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    });

    $opal.defs(self, '$parse', function(source, options) {
      var self = this;
      if (options == null) {
        options = $hash2([], {})
      }
      return self.$from_object($parse(source), options);
    });

    $opal.defs(self, '$parse!', function(source, options) {
      var self = this;
      if (options == null) {
        options = $hash2([], {})
      }
      return self.$parse(source, options);
    });

    $opal.defs(self, '$from_object', function(js_object, options) {
      var $a, $b, $c, $d, self = this;
      if (options == null) {
        options = $hash2([], {})
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, (($d = $scope.Hash) == null ? $opal.cm('Hash') : $d))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, (($d = $scope.Array) == null ? $opal.cm('Array') : $d))));
      return to_opal(js_object, options.map);
    });

    $opal.defs(self, '$generate', function(obj, options) {
      var self = this;
      if (options == null) {
        options = $hash2([], {})
      }
      return obj.$to_json(options);
    });

    $opal.defs(self, '$dump', function(obj, io, limit) {
      var $a, self = this, string = nil;
      if (io == null) {
        io = nil
      }
      if (limit == null) {
        limit = nil
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil) {
        if (($a = io['$responds_to?']("to_io")) !== false && $a !== nil) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    });
    
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = $Object._proto, $scope = $Object._scope;
    $opal.defn(self, '$to_json', function() {
      var self = this;
      return self.$to_s().$to_json();
    });

    return ($opal.defn(self, '$as_json', function() {
      var self = this;
      return nil;
    }), nil);
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = $Array._proto, $scope = $Array._scope;
    return (def.$to_json = function() {
      var self = this;
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, nil)
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = $Boolean._proto, $scope = $Boolean._scope;
    def.$as_json = function() {
      var self = this;
      return self;
    };

    return (def.$to_json = function() {
      var self = this;
      return (self == true) ? 'true' : 'false';
    }, nil);
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = $Hash._proto, $scope = $Hash._scope;
    return (def.$to_json = function() {
      var self = this;
      
      var inspect = [], keys = self.keys, map = self.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        inspect.push((key).$to_s().$to_json() + ':' + (map[key]).$to_json());
      }

      return '{' + inspect.join(', ') + '}';
    ;
    }, nil)
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = $NilClass._proto, $scope = $NilClass._scope;
    def.$as_json = function() {
      var self = this;
      return self;
    };

    return (def.$to_json = function() {
      var self = this;
      return "null";
    }, nil);
  })(self, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = $Numeric._proto, $scope = $Numeric._scope;
    def.$as_json = function() {
      var self = this;
      return self;
    };

    return (def.$to_json = function() {
      var self = this;
      return self.toString();
    }, nil);
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = $String._proto, $scope = $String._scope;
    def.$as_json = function() {
      var self = this;
      return self;
    };

    return $opal.defn(self, '$to_json', def.$inspect);
  })(self, null);
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = $Time._proto, $scope = $Time._scope;
    return (def.$to_json = function() {
      var self = this;
      return self.$strftime("%FT%T%z").$to_json();
    }, nil)
  })(self, null);
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/json.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;
  $opal.add_stubs(['$attr_reader', '$get', '$scraper_for_url', '$recipe', '$==', '$type', '$new', '$scrape', '$raise', '$is_a?', '$instance_eval', '$to_proc', '$url', '$name']);
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $ScraperScope(){};
      var self = $ScraperScope = $klass($base, $super, 'ScraperScope', $ScraperScope);

      var def = $ScraperScope._proto, $scope = $ScraperScope._scope;
      self.$attr_reader("recipe", "scraper_type", "doc", "url");

      def.$initialize = function(recipe, type, doc, url) {
        var self = this;
        self.recipe = recipe;
        self.scraper_type = type;
        self.doc = doc;
        return self.url = url;
      };

      return (def.$get = function(get_url) {
        var $a, $b, self = this, html = nil, scraper = nil, get_doc = nil;
        html = (($a = ((($b = $scope.IGHTMLQuery) == null ? $opal.cm('IGHTMLQuery') : $b))._scope).HTTP == null ? $a.cm('HTTP') : $a.HTTP).$get(get_url);
        if (html !== false && html !== nil) {
          scraper = self.$recipe().$scraper_for_url(get_url);
          if (scraper !== false && scraper !== nil) {
            get_doc = (function() {if (($a = (scraper.$type()['$==']("text"))) !== false && $a !== nil) {
              return html
              } else {
              return (($a = $scope.HTMLDoc) == null ? $opal.cm('HTMLDoc') : $a).$new(html)
            }; return nil; })();
            if (get_doc !== false && get_doc !== nil) {
              return scraper.$scrape(get_doc, get_url)
              } else {
              return $hash2(["error"], {"error": "cannot process document: \n" + (html)})
            };
            } else {
            return $hash2(["error"], {"error": "scraper not found for url: " + (get_url) + ", recipe: " + (self.$recipe())})
          };
          } else {
          return $hash2(["error"], {"error": "failed fetching html from url: " + (get_url)})
        };
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Scraper(){};
      var self = $Scraper = $klass($base, $super, 'Scraper', $Scraper);

      var def = $Scraper._proto, $scope = $Scraper._scope, TMP_1;
      def.scraper_block = nil;
      self.$attr_reader("url", "recipe", "type");

      def.$initialize = TMP_1 = function(recipe, url, type) {
        var $a, self = this, $iter = TMP_1._p, block = $iter || nil;
        if (type == null) {
          type = "html"
        }
        TMP_1._p = null;
        self.recipe = recipe;
        self.url = url;
        self.type = type;
        if (block === nil) {
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a).$new("Scraper requires a block"))};
        return self.scraper_block = block;
      };

      def.$scrape = function(the_doc, the_url) {
        var $a, $b, $c, $d, self = this, doc = nil;
        if (($a = the_doc['$is_a?']((($b = $scope.XMLNode) == null ? $opal.cm('XMLNode') : $b))) !== false && $a !== nil) {
          if (self.$type()['$==']("text")) {
            self.$raise("Attempt to scrape HTML with text parser")};
          return ($a = ($b = (($c = $scope.ScraperScope) == null ? $opal.cm('ScraperScope') : $c).$new(self.$recipe(), self.$type(), the_doc, self.$url())).$instance_eval, $a._p = self.scraper_block.$to_proc(), $a).call($b);
          } else {
          doc = (function() {if (($a = (self.$type()['$==']("text"))) !== false && $a !== nil) {
            return the_doc
            } else {
            return (($a = $scope.HTMLDoc) == null ? $opal.cm('HTMLDoc') : $a).$new(the_doc)
          }; return nil; })();
          return ($a = ($c = (($d = $scope.ScraperScope) == null ? $opal.cm('ScraperScope') : $d).$new(self.$recipe(), self.$type(), doc, the_url)).$instance_eval, $a._p = self.scraper_block.$to_proc(), $a).call($c);
        };
      };

      return (def.$to_s = function() {
        var self = this;
        return "<Scraper#" + (self.$recipe().$name()) + " url=" + (self.$url()) + ">";
      }, nil);
    })(self, null);
    
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/scraper.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;
  $opal.add_stubs(['$raise', '$class', '$__init__', '$instance_eval', '$new', '$extend']);
  return (function($base) {
    var self = $module($base, 'Singleton');

    var def = self._proto, $scope = self._scope, $a;
    def.$clone = function() {
      var $a, self = this;
      return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't clone instance of singleton " + (self.$class()));
    };

    def.$dup = function() {
      var $a, self = this;
      return self.$raise((($a = $scope.TypeError) == null ? $opal.cm('TypeError') : $a), "can't dup instance of singleton " + (self.$class()));
    };

    (function($base) {
      var self = $module($base, 'SingletonClassMethods');

      var def = self._proto, $scope = self._scope, TMP_1, TMP_2;
      def.$clone = TMP_1 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1._p, $yield = $iter || nil;
        TMP_1._p = null;
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__($opal.find_super_dispatcher(self, 'clone', TMP_1, $iter).apply(self, $zuper));
      };

      def.$inherited = TMP_2 = function(sub_klass) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_2._p, $yield = $iter || nil;
        TMP_2._p = null;
        $opal.find_super_dispatcher(self, 'inherited', TMP_2, $iter).apply(self, $zuper);
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__(sub_klass);
      };
            ;$opal.donate(self, ["$clone", "$inherited"]);
    })(self);

    (function(self) {
      var $scope = self._scope, def = self._proto;
      self._proto.$__init__ = function(klass) {
        var $a, $b, TMP_3, self = this;
        ($a = ($b = klass).$instance_eval, $a._p = (TMP_3 = function(){var self = TMP_3._s || this;
        return self.singleton__instance__ = nil}, TMP_3._s = self, TMP_3), $a).call($b);
        $opal.defs(klass, '$instance', function() {
          var $a, self = this;
          if (self.singleton__instance__ == null) self.singleton__instance__ = nil;

          if (($a = self.singleton__instance__) !== false && $a !== nil) {
            return self.singleton__instance__};
          return self.singleton__instance__ = self.$new();
        });
        return klass;
      };
      return (self._proto.$included = TMP_4 = function(klass) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_4._p, $yield = $iter || nil;
        TMP_4._p = null;
        $opal.find_super_dispatcher(self, 'included', TMP_4, $iter).apply(self, $zuper);
        klass.$extend((($a = $scope.SingletonClassMethods) == null ? $opal.cm('SingletonClassMethods') : $a));
        return (($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$__init__(klass);
      }, nil);
    })((($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a).$singleton_class());
        ;$opal.donate(self, ["$clone", "$dup"]);
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/singleton.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;
  $opal.add_stubs(['$include', '$find', '$scraper_for_url', '$recipes', '$<<']);
  ;
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $RecipeRegistry(){};
      var self = $RecipeRegistry = $klass($base, $super, 'RecipeRegistry', $RecipeRegistry);

      var def = $RecipeRegistry._proto, $scope = $RecipeRegistry._scope, $a;
      def.recipes = nil;
      self.$include((($a = $scope.Singleton) == null ? $opal.cm('Singleton') : $a));

      def.$initialize = function() {
        var self = this;
        return self.recipes = [];
      };

      def.$recipes = function() {
        var self = this;
        return self.recipes;
      };

      def.$scraper_for_url = function(url) {
        var $a, $b, TMP_1, self = this, scraper = nil;
        scraper = nil;
        ($a = ($b = self.$recipes()).$find, $a._p = (TMP_1 = function(recipe){var self = TMP_1._s || this;if (recipe == null) recipe = nil;
        return scraper = recipe.$scraper_for_url(url)}, TMP_1._s = self, TMP_1), $a).call($b);
        return scraper;
      };

      return (def.$register = function(scraper_class) {
        var self = this;
        return self.$recipes()['$<<'](scraper_class);
      }, nil);
    })(self, null)
    
  })(self);
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/recipe_registry.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;
  $opal.add_stubs(['$[]=', '$metadata', '$<<', '$scrapers', '$new', '$to_proc', '$register', '$instance', '$detect', '$is_a?', '$url', '$==', '$=~', '$extend']);
  return (function($base) {
    var self = $module($base, 'ScraperKit');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $Recipe(){};
      var self = $Recipe = $klass($base, $super, 'Recipe', $Recipe);

      var def = $Recipe._proto, $scope = $Recipe._scope, $a;
      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self._proto, $scope = self._scope, TMP_1, TMP_2;
        def.$metadata = function() {
          var $a, self = this;
          if (self.metadata == null) self.metadata = nil;

          return ((($a = self.metadata) !== false && $a !== nil) ? $a : self.metadata = $hash2([], {}));
        };

        def.$scrapers = function() {
          var $a, self = this;
          if (self.scrapers == null) self.scrapers = nil;

          return ((($a = self.scrapers) !== false && $a !== nil) ? $a : self.scrapers = []);
        };

        def.$title = function(title) {
          var self = this;
          return self.$metadata()['$[]=']("title", title);
        };

        def.$on = TMP_1 = function(url) {
          var $a, $b, $c, self = this, $iter = TMP_1._p, block = $iter || nil;
          TMP_1._p = null;
          return self.$scrapers()['$<<'](($a = ($b = (($c = $scope.Scraper) == null ? $opal.cm('Scraper') : $c)).$new, $a._p = block.$to_proc(), $a).call($b, self, url));
        };

        def.$on_text = TMP_2 = function(url) {
          var $a, $b, $c, self = this, $iter = TMP_2._p, block = $iter || nil;
          TMP_2._p = null;
          return self.$scrapers()['$<<'](($a = ($b = (($c = $scope.Scraper) == null ? $opal.cm('Scraper') : $c)).$new, $a._p = block.$to_proc(), $a).call($b, self, url, "text"));
        };

        def.$inherited = function(subclass) {
          var $a, self = this;
          return (($a = $scope.RecipeRegistry) == null ? $opal.cm('RecipeRegistry') : $a).$instance().$register(subclass);
        };

        def.$scraper_for_url = function(url) {
          var $a, $b, TMP_3, self = this;
          return ($a = ($b = self.$scrapers()).$detect, $a._p = (TMP_3 = function(scraper){var self = TMP_3._s || this, $a, $b;if (scraper == null) scraper = nil;
          if (($a = scraper.$url()['$is_a?']((($b = $scope.String) == null ? $opal.cm('String') : $b))) !== false && $a !== nil) {
              return (url['$=='](scraper.$url()))
              } else {
              return (url['$=~'](scraper.$url()))
            }}, TMP_3._s = self, TMP_3), $a).call($b);
        };
                ;$opal.donate(self, ["$metadata", "$scrapers", "$title", "$on", "$on_text", "$inherited", "$scraper_for_url"]);
      })(self);

      return self.$extend((($a = $scope.ClassMethods) == null ? $opal.cm('ClassMethods') : $a));
    })(self, null)
    
  })(self)
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit/recipe.js.map
;
/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;
  $opal.add_stubs([]);
  ;
  ;
  ;
  ;
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self._proto, $scope = self._scope;
    def.$puts = function(message) {
      var self = this;
      return Log(message);
    }
        ;$opal.donate(self, ["$puts"]);
  })(self);
})(Opal);

//@ sourceMappingURL=/__opal_source_maps__/scraper_kit.js.map
;
